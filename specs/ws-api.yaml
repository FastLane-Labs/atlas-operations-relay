asyncapi: '3.0.0'
info:
  title: Atlas Operations Relay websocket API
  description: |
    The websocket API implementation for an Atlas Operations Relay, based on the AsyncAPI 3.0.0 specification..

  contact:
    email: technical-support@fastlane.finance
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0.0'

  externalDocs:
    description: See an Atlas Operation Relay implementation example
    url: https://github.com/FastLane-Labs/atlas-operations-relay

channels:
  Solver:
    address: /ws/solver
    messages:
      Ping:
        $ref: '#/components/messages/Ping'
      Success:
        $ref: '#/components/messages/Success'
      Error:
        $ref: '#/components/messages/Error'
      Subscribe:
        $ref: '#/components/messages/Subscribe'
      Unsubscribe:
        $ref: '#/components/messages/Unsubscribe'
      SubscriptionUpdate:
        $ref: '#/components/messages/SubscriptionUpdate'
      NewSolverOperation:
        $ref: '#/components/messages/NewSolverOperation'
  Bundler:
    address: /ws/bundler
    messages:
      Ping:
        $ref: '#/components/messages/Ping'
      Error:
        $ref: '#/components/messages/Error'
      NewBundle:
        $ref: '#/components/messages/NewBundle'
      BundlingSuccess:
        $ref: '#/components/messages/BundlingSuccess'
    bindings:
      ws:
        query:
          type: object
          properties:
            timestamp:
              type: integer
              description: The timestamp of the request
              example: 1619430000
            address:
              type: string
              description: The address of the bundler
              pattern: '^0x[0-9a-f]{40}$'
            signature:
              type: string
              description: The concatenated signature of the timestamp and address by the bundler
              pattern: '^0x([0-9a-f][0-9a-f])*$'

operations:
  processSolverMessage:
    action: receive
    channel:
      $ref: '#/channels/Solver'
    messages:
      - $ref: '#/channels/Solver/messages/Ping'
      - $ref: '#/channels/Solver/messages/Subscribe'
      - $ref: '#/channels/Solver/messages/Unsubscribe'
      - $ref: '#/channels/Solver/messages/NewSolverOperation'

  sendSolverMessage:
    action: send
    channel:
      $ref: '#/channels/Solver'
    messages:
      - $ref: '#/channels/Solver/messages/Success'
      - $ref: '#/channels/Solver/messages/Error'
      - $ref: '#/channels/Solver/messages/SubscriptionUpdate'
  
  processBundlerMessage:
    action: receive
    channel:
      $ref: '#/channels/Bundler'
    messages:
      - $ref: '#/channels/Bundler/messages/Ping'
      - $ref: '#/channels/Bundler/messages/BundlingSuccess'
      - $ref: '#/channels/Bundler/messages/Error'
  
  sendBundlerMessage:
    action: send
    channel:
      $ref: '#/channels/Bundler'
    messages:
      - $ref: '#/channels/Bundler/messages/NewBundle'

components:
  messages:
    Success:
      summary: Success message
      description: The success message is sent in response to a successful request
      payload:
        $ref: '#/components/schemas/Success'
      examples:
        - payload:
            id: 1
            result: success
    
    Error:
      summary: Error message
      description: The error message is sent in response to a failed request
      payload:
        $ref: '#/components/schemas/Error'
      examples:
        - payload:
            id: 2
            error: invalid topic
    
    Ping:
      summary: Ping server to determine whether a connection is alive
      description: Client can ping server to determine whether connection is alive, server responds with pong. This is an application level ping as opposed to default ping in websockets standard which is server initiated
      payload:
        $ref: '#/components/schemas/Ping'
      examples:
        - payload:
            id: 1
            method: ping
      x-response:
        anyOf:
          - $ref: '#/components/messages/Success'
          - $ref: '#/components/messages/Error'

    Subscribe:
      description: Subscribe to a topic
      payload:
        $ref: '#/components/schemas/Subscribe'
      examples:
        - payload:
            id: 1
            method: subscribe
            params:
              topic: newSolverInputs
      x-response:
        anyOf:
          - $ref: '#/components/messages/Success'
          - $ref: '#/components/messages/Error'

    Unsubscribe:
      description: Unsubscribe from a topic
      payload:
        $ref: '#/components/schemas/Unsubscribe'
      examples:
        - payload:
            id: 1
            method: unsubscribe
            params:
              topic: newSolverInputs
      x-response:
        anyOf:
          - $ref: '#/components/messages/Success'
          - $ref: '#/components/messages/Error'
    
    SubscriptionUpdate:
      summary: Subscription update
      description: The server sends a subscription update to the client when there is a new event on the subscribed topic
      payload:
        $ref: '#/components/schemas/SubscriptionUpdate'

    NewSolverOperation:
      summary: New solver operation to be submitted
      description: The client submits a new solver operation to the server
      payload:
        $ref: '#/components/schemas/NewSolverOperation'
      x-response:
        anyOf:
          - $ref: '#/components/messages/Success'
          - $ref: '#/components/messages/Error'
    
    NewBundle:
      summary: The new bundle to be processed
      payload:
        $ref: '#/components/schemas/NewBundle'
      x-response:
        anyOf:
          - $ref: '#/components/messages/BundlingSuccess'
          - $ref: '#/components/messages/Error'
    
    BundlingSuccess:
      summary: The generated Atlas transaction hash following a bundling request
      payload:
        $ref: '#/components/schemas/BundlingSuccess'

  schemas:
    ReqId:
      type: integer
      description: Client originated ID reflected in response message
    
    Success:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReqId'
        result:
          type: string
          description: The result message
      required:
        - id
        - result
    
    Error:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReqId'
        error:
          type: string
          description: The error message
      required:
        - id
        - error

    Ping:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReqId'
        method:
          type: string
          const: ping
      required:
        - id
        - method

    Subscribe:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReqId'
        method:
          type: string
          const: subscribe
        params:
          type: object
          properties:
            topic:
              type: string
              enum: ['newSolverInputs']
      required:
        - id
        - method
        - params

    Unsubscribe:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReqId'
        method:
          type: string
          const: unsubscribe
        params:
          type: object
          properties:
            topic:
              type: string
              enum: ['newSolverInputs']
      required:
        - id
        - method
        - params

    SubscriptionUpdate:
      type: object
      properties:
        event:
          type: string
          const: update
        topic:
          type: string
          enum: ['newSolverInputs']
        data:
          type: object
          properties:
            userOperation:
              $ref: '#/components/schemas/SolverInput'
      required:
        - event
        - topic
        - data

    NewSolverOperation:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReqId'
        method:
          type: string
          const: submitSolverOperation
        params:
          type: object
          properties:
            solverOperation:
              $ref: '#/components/schemas/SolverOperation'
      required:
        - id
        - method
        - params

    NewBundle:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReqId'
        event:
          type: string
          const: newBundle
        bundle:
          $ref: '#/components/schemas/Bundle'
      required:
        - id
        - event
        - bundle

    BundlingSuccess:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReqId'
        result:
          type: string
          description: The generated Atlas transaction hash
          examples: ['0x6044c22ab257659b74b1eb4cf2f8f65e0bcc2d9fe832279efb42a6700873fa74']
      required:
        - id
        - result

    UserOperation:
      type: object
      properties:
        from:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        to:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        value:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        gas:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        maxFeePerGas:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        nonce:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        deadline:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        dapp:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        control:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        sessionKey:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        data:
          type: string
          description: Solidity type bytes
          pattern: '^0x([0-9a-f][0-9a-f])*$'
        signature:
          type: string
          description: Solidity type bytes
          pattern: '^0x([0-9a-f][0-9a-f])*$'
      required:
        - from
        - to
        - value
        - gas
        - maxFeePerGas
        - nonce
        - deadline
        - dapp
        - control
        - sessionKey
        - data
        - signature
    
    SolverOperation:
      type: object
      properties:
        from:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        to:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        value:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        gas:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        maxFeePerGas:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        deadline:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        solver:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        control:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        userOpHash:
          type: string
          description: Solidity type bytes32
          pattern: '^0x[0-9a-f]{64}$'
        bidToken:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        bidAmount:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        data:
          type: string
          description: Solidity type bytes
          pattern: '^0x([0-9a-f][0-9a-f])*$'
        signature:
          type: string
          description: Solidity type bytes
          pattern: '^0x([0-9a-f][0-9a-f])*$'
      required:
        - from
        - to
        - value
        - gas
        - maxFeePerGas
        - deadline
        - solver
        - control
        - userOpHash
        - bidToken
        - bidAmount
        - data
        - signature
    
    SolverOperations:
      type: array
      items:
        $ref: '#/components/schemas/SolverOperation'
    
    DAppOperation:
      type: object
      properties:
        from:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        to:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        value:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        gas:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        nonce:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        deadline:
          type: string
          description: Solidity type uint256
          pattern: '^0x[0-9a-f]{1,64}$'
        control:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        bundler:
          type: string
          description: Solidity type address
          pattern: '^0x[0-9a-f]{40}$'
        userOpHash:
          type: string
          description: Solidity type bytes32
          pattern: '^0x[0-9a-f]{64}$'
        callChainHash:
          type: string
          description: Solidity type bytes32
          pattern: '^0x[0-9a-f]{64}$'
        signature:
          type: string
          description: Solidity type bytes
          pattern: '^0x([0-9a-f][0-9a-f])*$'
      required:
        - from
        - to
        - value
        - gas
        - nonce
        - deadline
        - control
        - bundler
        - userOpHash
        - callChainHash
        - signature
    
    Bundle:
      type: object
      properties:
        userOperation:
          $ref: '#/components/schemas/UserOperation'
        solverOperations:
          $ref: '#/components/schemas/SolverOperations'
        dAppOperation:
          $ref: '#/components/schemas/DAppOperation'
      required:
        - userOperation
        - solverOperations
        - dAppOperation
